--======================================================================--
-- @作者: GGE研究群: 342119466
-- @创建时间:   2018-03-03 02:34:19
-- @Last Modified time: 2021-04-28 00:09:11
--所有素材反编译由GGE开发者 313738139 baidwwy GGELUA作者亲自写.
--======================================================================--
local Key = {
        0x8E,0x38,0x8F,0x75,0x83,0xB7,0x43,0x0D,0xDD,0x88,0xAD,0x29,0x4C,0xF9,0xB4,0xE4,
        0x44,0xF4,0xA3,0x64,0x7D,0x4B,0x5C,0x0B,0x34,0x09,0x12,0x5A,0x14,0xB4,0x98,0xB5,
        0x85,0x55,0x61,0x0D,0x0A,0x12,0x62,0x61,0xE0,0x02,0x74,0x78,0x7A,0x19,0xC7,0x0B,
        0x09,0xAC,0x94,0x30,0x60,0x46,0xE1,0xB3,0x02,0xB8,0xCC,0x4A,0xF7,0xD3,0x6B,0xAD,
        0x49,0x63,0x76,0x83,0x6C,0xC1,0x8F,0x30,0xB0,0xB0,0x92,0xF3,0x3C,0x15,0xFE,0xF3,
        0x0C,0x2A,0x1B,0x65,0x8C,0x98,0xE3,0xA5,0x92,0x1A,0x3A,0x05,0x2E,0x61,0xC0,0x63,
        0x0B,0x55,0x60,0x4A,0x4C,0xC5,0x29,0x90,0x1E,0x64,0x8C,0xBA,0xDF,0xD7,0x4F,0xD7,
        0xBB,0xB8,0xA6,0xB2,0x85,0xA5,0xC7,0xE9,0x7E,0x73,0x28,0xBF,0x75,0x8C,0xDE,0x5C,
        0x28,0x5A,0xFE,0x31,0x11,0x7E,0x19,0x45,0x11,0x94,0xF4,0x9E,0x4C,0xE6,0x6E,0x58,
        0x48,0x6F,0xC9,0xEC,0x36,0x61,0xBB,0x9C,0x03,0x57,0x67,0xF1,0x0C,0xC4,0x75,0xF7,
        0xCA,0xAF,0x98,0x31,0xCF,0xD7,0xF8,0x1A,0x2F,0x35,0x14,0xDB,0x75,0x19,0x93,0x0F,
        0xA4,0x83,0x27,0x7D,0x67,0x67,0x74,0x93,0x49,0x63,0x08,0x67,0xB1,0x54,0xEA,0xD7,
        0xD9,0x34,0x03,0x0B,0x70,0x09,0xD9,0x33,0x85,0xA4,0x79,0x1F,0x57,0xA0,0x4B,0x88,
        0x02,0x11,0x79,0x4F,0x8A,0x6E,0x0F,0x95,0xBF,0x08,0x5F,0x4F,0x74,0xAE,0x19,0xDA,
        0xBB,0x80,0xC9,0x3A,0x3A,0x94,0xBA,0x11,0x18,0x46,0xFC,0x8C,0x33,0x48,0x0D,0x18,
        0x10,0x5A,0xF1,0x9C,0x57,0xCF,0x2A,0xCB,0xB6,0x5D,0x3C,0x19,0x0B,0x3B,0xFC,0xDD,
        0x20
    }
    local Key2 = {
        0x99,0x61,0x52,0x9E,0x1C,0xBD,0x38,0xEB,0x16,0x7E,0x98,0x1C,0x90,0x17,0x6E,0xD3,
        0x3D,0x87,0x06,0x49,0x91,0x5C,0x7C,0x90,0x2E,0x6B,0x11,0x59,0x58,0x14,0x77,0xA0,
        0x0F,0x13,0xA0,0x40,0x67,0x22,0xA5,0x22,0xA0,0xB0,0xD3,0x0F,0x67,0x0E,0x98,0x10,
        0x2C,0x29,0x7F,0xF7,0x0A,0x6D,0xD6,0x3E,0xE3,0xC0,0x70,0xAF,0xAD,0xDD,0x93,0x03,
        0x07,0xF7,0x0E,0x7D,0x76,0x2F,0x6D,0x1C,0xE0,0xE2,0xA8,0xE0,0x88,0x6D,0x2A,0x21,
        0xD2,0x01,0x2E,0x30,0x94,0x7E,0x97,0xA0,0x3B,0x63,0x5B,0xA5,0xB0,0xF4,0x74,0xC1,
        0x1D,0xD0,0x09,0x6E,0xFE,0x1B,0x99,0xFC,0xBB,0x63,0x18,0x26,0xC4,0xF5,0xB4,0x77,
        0x97,0x50,0xDC,0xAC,0xB0,0x64,0x6E,0x87,0x61,0x6C,0x43,0x14,0xD2,0xC6,0x6A,0xEA,
        0x6F,0xE6,0xC3,0xB6,0x64,0xBA,0x21,0xB7,0x66,0x31,0x73,0x31,0x67,0x71,0xDB,0x45,
        0xAD,0xE2,0x0E,0x61,0x19,0xC6,0x11,0xB8,0x63,0x80,0x0E,0x93,0xD7,0x86,0x2A,0xF3,
        0xF8,0x2C,0xB5,0xDD,0x32,0xFD,0x13,0xDC,0x2F,0x26,0x46,0x80,0xEF,0x3E,0x21,0xEE,
        0x90,0xFC,0x65,0xEF,0xB8,0x09,0xD2,0xA7,0xD5,0x0C,0x53,0xE3,0xAC,0x8C,0xDE,0xDF,
        0x07,0x7F,0x37,0x3B,0xBB,0xFC,0x14,0xAF,0xCF,0x31,0x32,0xF1,0x80,0x90,0xC7,0x26,
        0x60,0x1F,0x04,0xD9,0x21,0x39,0x3B,0xF0,0x59,0x0E,0x09,0x26,0xAA,0x2F,0x30,0xA2,
        0x46,0x66,0x79,0x70,0x07,0xE4,0x34,0x92,0xE9,0xB5,0x20,0x87,0xD5,0xDF,0x27,0x45,
        0x44,0x2E,0x84,0x8E,0x89,0x06,0xBE,0xCD,0x45,0x46,0xE0,0xAD,0xF4,0xEC,0x05,0xA1,
        0x02
    }
    local Key3 = {
        0x82,0xAC,0x6A,0x44,0x54,0x50,0x12,0xCC,0x62,0xB2,0x4B,0xAE,0xF4,0xDF,0x9C,0xAF,
        0xB3,0xB1,0xBD,0x84,0x17,0xB3,0x0D,0x43,0x15,0x53,0x24,0x95,0xE6,0x8D,0x52,0x95,
        0x58,0x73,0x0A,0x20,0xA9,0x3E,0x54,0x6E,0x29,0xC6,0x2F,0x71,0x73,0x8F,0x41,0x99,
        0x43,0xB4,0xBC,0x2B,0x80,0x64,0xBE,0xCD,0x9F,0x28,0x30,0x01,0x2C,0x7C,0xE5,0xD3,
        0x60,0xB5,0x57,0x81,0xD6,0x7C,0x06,0x76,0x5D,0x50,0x5B,0x50,0x84,0x9A,0xCE,0x84,
        0x12,0x8A,0x52,0x32,0xD0,0x27,0x15,0xF2,0xB4,0x3B,0x80,0x82,0x0F,0x54,0x42,0xAC,
        0xE0,0x5B,0x12,0xBD,0x39,0xBF,0xC1,0xC6,0xAE,0x47,0xCC,0x31,0x0A,0x6F,0x4A,0x06,
        0x58,0xAA,0xED,0xA0,0x2B,0xB3,0x03,0x39,0xA1,0x64,0xCC,0x9C,0xFB,0x83,0x67,0x0A,
        0x0E,0xAE,0x6E,0x2A,0x88,0x11,0x4C,0x52,0xC8,0x8B,0x83,0x89,0x5A,0xE3,0xE9,0x45,
        0xF0,0x7A,0x2A,0x63,0x65,0xA1,0x82,0x2E,0x58,0xD8,0x1D,0xD4,0xF2,0x26,0xC9,0x2B,
        0xDE,0xC3,0x23,0x5B,0x02,0x20,0x7C,0x47,0x5F,0x9C,0xD7,0x9F,0x30,0x79,0xDE,0xBC,
        0x79,0x87,0xAA,0x81,0x59,0x05,0xA4,0x6C,0x2C,0x40,0xD1,0xAF,0xF3,0x76,0x5F,0xA3,
        0xC0,0x58,0xAA,0x95,0xC0,0x8F,0x44,0xD0,0xFD,0xE1,0x04,0xC8,0xC8,0xE2,0xFD,0xDE,
        0xF8,0x5F,0x5B,0x6B,0x7A,0x49,0xD1,0xD9,0x1F,0xB6,0x2F,0xC0,0x4E,0xCB,0x53,0xE7,
        0x3D,0x35,0xDD,0xD6,0xCD,0x49,0xFB,0xE9,0x44,0xD9,0x82,0x77,0x01,0xDA,0xA2,0x49,
        0x42,0xF1,0xB6,0x95,0x1C,0xF2,0x29,0x78,0x86,0xCF,0x76,0x0B,0x60,0x82,0x82,0x33,
        0x8F
    }
    local Key4 = {
        0xE7,0xDF,0xE2,0x94,0x22,0xD8,0xCF,0x31,0xED,0x41,0xFC,0x0B,0x37,0x8D,0x70,0x1F,
        0x3D,0xDE,0x26,0x48,0xE9,0x33,0x38,0x41,0x83,0x6D,0x78,0x88,0x56,0x69,0x45,0xF2,
        0x77,0xE7,0x9E,0x48,0x8E,0x36,0xF5,0x03,0xD3,0x89,0x56,0xDF,0xDB,0x1B,0x80,0x61,
        0xF8,0xA8,0xC1,0x12,0x27,0x47,0xAA,0xB4,0xA7,0xA1,0x12,0xB4,0x60,0x47,0xDA,0x85,
        0xFA,0x0A,0x93,0x4F,0xEE,0x29,0x90,0x08,0xE8,0x23,0x73,0x61,0xDC,0x57,0x65,0x68,
        0xEC,0x18,0x8F,0xAC,0xA6,0x33,0xCB,0x30,0x3D,0xE8,0x9F,0xEB,0x24,0x42,0xA1,0x8D,
        0xAE,0xCF,0xE3,0xD1,0x87,0x31,0x71,0xCF,0x19,0xBA,0x29,0x04,0xD2,0x4A,0xD6,0x50,
        0x3D,0xA8,0xC6,0x49,0xB6,0x2E,0xDD,0xC7,0x3E,0x63,0x12,0x07,0x88,0xA3,0xE2,0xA7,
        0x81,0xE5,0xB1,0x0D,0x73,0x93,0xE0,0xBB,0xA6,0xBE,0x94,0xEB,0x0B,0xC8,0x5C,0xF2,
        0x12,0x4F,0xAF,0x7B,0x7A,0x59,0xD5,0x81,0xF0,0x1D,0x93,0x24,0x20,0x6B,0x48,0x74,
        0xD7,0x80,0x82,0xEC,0x97,0xCA,0xDC,0xA9,0xC7,0x0C,0xA2,0xF7,0x99,0xF1,0xBC,0x74,
        0x07,0x1E,0xF3,0x39,0xF3,0x68,0x2E,0x28,0x11,0x31,0x1C,0x57,0xFE,0xBD,0x9B,0x3C,
        0x77,0x20,0x14,0x89,0x47,0x6F,0x5B,0x47,0x72,0x07,0xB2,0x6E,0xB6,0xDD,0xE6,0xFD,
        0x5F,0x20,0x1D,0x02,0x76,0x0F,0x7F,0x70,0x53,0x5A,0xDB,0x67,0xAE,0x86,0xA9,0x0B,
        0x6F,0x67,0x80,0x79,0xDE,0x33,0x2E,0x97,0xC2,0xAC,0xC6,0xED,0xB4,0xBE,0x71,0x33,
        0x49,0x1D,0xF6,0xDF,0xA0,0x9A,0xC4,0x69,0x9F,0xA3,0x36,0xEB,0x92,0xF2,0x97,0xEA,
        0x5C
    }
local function _解密列表(Data, Size)
    local Data = ffi.cast("char*", Data)
    local Key_Step = 1
    for i = 0, Size - 1, 1 do
        Data[i] = bit.bxor(Data[i], Key[Key_Step])
        Key_Step = Key_Step + 1
        if Key_Step == 34 then
            Key_Step = Key_Step + 1
        end
        if Key_Step == 258 then
            Key_Step = 1
        end
    end
end
local function _解密列表2(Data, Size)
    local Data = ffi.cast("char*", Data)
    local Key_Step = 1
    for i = 0, Size - 1, 1 do
        Data[i] = bit.bxor(Data[i], Key2[Key_Step])
        Key_Step = Key_Step + 1
        if Key_Step == 34 then
            Key_Step = Key_Step + 1
        end
        if Key_Step == 258 then
            Key_Step = 1
        end
    end
end
local function _解密列表3(Data, Size)
    local Data = ffi.cast("char*", Data)
    local Key_Step = 1
    for i = 0, Size - 1, 1 do
        Data[i] = bit.bxor(Data[i], Key3[Key_Step])
        Key_Step = Key_Step + 1
        if Key_Step == 34 then
            Key_Step = Key_Step + 1
        end
        if Key_Step == 258 then
            Key_Step = 1
        end
    end
end
local function _解密列表4(Data, Size)
    local Data = ffi.cast("char*", Data)
    local Key_Step = 1
    for i = 0, Size - 1, 1 do
        Data[i] = bit.bxor(Data[i], Key4[Key_Step])
        Key_Step = Key_Step + 1
        if Key_Step == 34 then
            Key_Step = Key_Step + 1
        end
        if Key_Step == 258 then
            Key_Step = 1
        end
    end
end
ffi = require("ffi")
ffi.cdef([[
    typedef struct {
        char Flag[4]; // 包裹的标签
        uint32_t Number; // 包裹中的文件数量
        uint32_t Offset; // 包裹中的文件列表偏移位置
    }WDF_HEADER;

    typedef struct {
        uint32_t Hash; // 文件的名字散列
        uint32_t Offset; // 文件的偏移
        uint32_t Size; // 文件的大小
        uint32_t Spaces; // 文件的空间
    }WDF_FILELIST;
]])


local wdf = class()
local _Max = 0
local _Ptr = nil

function wdf:初始化(路径)
    self.路径 = 路径
    self.File = require("文件类")(路径)
    self.List = {}
    local head = self.File:读入数据(ffi.new("WDF_HEADER"))
    local flag = ffi.string(head.Flag, 4)
    self.File:移动读写位置(head.Offset, self.File.SEEK_SET)
    self.Clist = self.File:读入数据(ffi.new("WDF_FILELIST[?]", head.Number))
    if flag == "XFDW" or flag == "HFDW" or flag == "NXPK" then
        _解密列表(self.Clist, ffi.sizeof(self.Clist))
    end
    if flag == "RXPK" then
        _解密列表2(self.Clist, ffi.sizeof(self.Clist))
    end
    if flag == "RXPB" then
        _解密列表3(self.Clist, ffi.sizeof(self.Clist))
    end
    if flag == "RXPY" then
        _解密列表4(self.Clist, ffi.sizeof(self.Clist))
    end
    local MaxSize = 0
    for i = 0, head.Number - 1, 1 do
        self.List[self.Clist[i].Hash] = self.Clist[i]
        if MaxSize < self.Clist[i].Size then
            MaxSize = self.Clist[i].Size
        end
    end
    if _Max < MaxSize then
        _Max = MaxSize
        _Ptr = ffi.new("char[?]", MaxSize)
    end
end

function wdf:读数据(Hash)
    if type(Hash) == "string" then
        Hash = tonumber(Hash)
    end
    if self.List[Hash] then
        self.File:移动读写位置(self.List[Hash].Offset, self.File.SEEK_SET)
        self.File:读入数据(_Ptr, self.List[Hash].Size)

        return _Ptr, self.List[Hash].Size
    end
end

function wdf:取文件(Hash)

    return self:读数据(Hash)
end

function wdf:取纹理(Hash)
    return require("gge纹理类")(self:读数据(Hash))
end

function wdf:取精灵(Hash)
    return require("Script/通用方法/gge精灵类")(self:取纹理(Hash))
end

function wdf:读偏移(Hash)
    if self.List[Hash] then
        return self.List[Hash].Offset, self.List[Hash].Size
    end
end

function wdf:取偏移(Hash)
    if type(Hash) == "string" then
        Hash = tonumber(Hash)
    end
    if self.List[Hash] then
        return self.List[Hash].Offset
    end
end

function wdf:取长度(Hash)
    if type(Hash) == "string" then
        Hash = tonumber(Hash)
    end
    if self.List[Hash] then
        return self.List[Hash].Size
    end
end

function wdf:置注释(path)
    local ini = __gge.readfile(path)
    if ini then
        slot3, slot4, slot5 = ini:gmatch("([^\r\n]+)")
        if ini.gmatch("([^\r\n]+)") then
            local param, value = line:match("^(.-)%s*=%s*(.+)$")
            if param and value then
                if not self.List[value] then
                    self.List[value] = self.List[tonumber(param, 16)]
                    if not self.List[value] then
                        print("ID不存在", value, param, tonumber(param, 16))
                    end
                else
                    print("路径重复", self.路径, value)
                end
            end
        end
    else
        error("ini不存在！", level)
    end
    return self
end

return wdf
